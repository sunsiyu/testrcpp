// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/speedsvr.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// processRecording
Rcpp::DataFrame processRecording(SEXP ptr, Rcpp::DataFrame steps);
static SEXP speedsvr_processRecording_try(SEXP ptrSEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type steps(stepsSEXP);
    __result = Rcpp::wrap(processRecording(ptr, steps));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP speedsvr_processRecording(SEXP ptrSEXP, SEXP stepsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(speedsvr_processRecording_try(ptrSEXP, stepsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int speedsvr_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::DataFrame(*processRecording)(SEXP,Rcpp::DataFrame)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP speedsvr_RcppExport_registerCCallable() { 
    R_RegisterCCallable("speedsvr", "speedsvr_processRecording", (DL_FUNC)speedsvr_processRecording_try);
    R_RegisterCCallable("speedsvr", "speedsvr_RcppExport_validate", (DL_FUNC)speedsvr_RcppExport_validate);
    return R_NilValue;
}
